boolean isBST(Node node)
{
	if (node == null)
		return true;
	
	/* False if left is > than node */
	if (node.left != null && node.left.data > node.data)
		return false;
	
	/* False if right is < than node */
	if (node.right != null && node.right.data < node.data)
		return false;
	
	/* False if, recursively, the left or right is not a BST */
	if (!isBST(node.left) || !isBST(node.right))
		return false;
	
	/* Passing all that, it's a BST */
	return true;
}

// Java program to print postorder
// traversal from preorder and
// inorder traversals
import java.util.Arrays;

class GFG
{

// A utility function to search x in arr[] of size n
static int search(int arr[], int x, int n)
{
	for (int i = 0; i < n; i++)
		if (arr[i] == x)
			return i;
	return -1;
}

// Prints postorder traversal from
// given inorder and preorder traversals
static void printPostOrder(int in1[],
					int pre[], int n)
{
	// The first element in pre[] is
	// always root, search it in in[]
	// to find left and right subtrees
	int root = search(in1, pre[0], n);

	// If left subtree is not empty,
	// print left subtree
	if (root != 0)
		printPostOrder(in1, Arrays.copyOfRange(pre, 1, n), root);

	// If right subtree is not empty,
	// print right subtree
	if (root != n - 1)
		printPostOrder(Arrays.copyOfRange(in1, root+1, n),
			Arrays.copyOfRange(pre, 1+root, n), n - root - 1);

	// Print root
	System.out.print( pre[0] + " ");
}

// Driver code
public static void main(String args[])
{
	int in1[] = { 4, 2, 5, 1, 3, 6 };
	int pre[] = { 1, 2, 4, 5, 3, 6 };
	int n = in1.length;
	System.out.println("Postorder traversal " );
	printPostOrder(in1, pre, n);
}
}

package com.JournalDev;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    static class TreeNode {
        int data;
        TreeNode left, right;

        public TreeNode(int key) {
            data = key;
            left = right = null;
        }
    }

    static void preorder(TreeNode TreeNode) {
        if (TreeNode == null)
            return;

        // Traverse root
        System.out.print(TreeNode.data + " ");
        // Traverse left
        preorder(TreeNode.left);
        // Traverse right
        preorder(TreeNode.right);
    }

    static void inorder(TreeNode TreeNode) {
        if (TreeNode == null)
            return;

        // Traverse left
        inorder(TreeNode.left);
        // Traverse root
        System.out.print(TreeNode.data + " ");
        // Traverse right
        inorder(TreeNode.right);
    }

    static void postorder(TreeNode TreeNode) {
        if (TreeNode == null)
            return;

        // Traverse left
        postorder(TreeNode.left);
        // Traverse right
        postorder(TreeNode.right);
        // Traverse root
        System.out.print(TreeNode.data + " ");
    }
   static void printLevelOrder(TreeNode root) {
       Queue<TreeNode> queue = new LinkedList<TreeNode>();
       queue.add(root);
       while (!queue.isEmpty()) {
           TreeNode tempNode = queue.poll();
           System.out.print(tempNode.data + " ");

           /*add left child to the queue */
           if (tempNode.left != null) {
               queue.add(tempNode.left);
           }

           /*add right right child to the queue */
           if (tempNode.right != null) {
               queue.add(tempNode.right);
           }
       }
   }

    public static void main(String args[])
            
    {
        TreeNode root = new TreeNode(0);
        root.left = new TreeNode(1);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(3);
        root.left.right = new TreeNode(4);
        System.out.println("Inorder traversal");
        inorder(root);

        System.out.println("\nPreorder traversal ");
        preorder(root);

        System.out.println("\nPostorder traversal");
       postorder(root);

        System.out.println("\nLevelorder traversal");
        printLevelOrder(root);

    }

}

// Recursive Java program for level
// order traversal of Binary Tree

/* Class containing left and right child of current
node and key value*/
class Node {
	int data;
	Node left, right;
	public Node(int item)
	{
		data = item;
		left = right = null;
	}
}

class BinaryTree {
	// Root of the Binary Tree
	Node root;

	public BinaryTree() { root = null; }

	/* function to print level order traversal of tree*/
	void printLevelOrder()
	{
		int h = height(root);
		int i;
		for (i = 1; i <= h; i++)
			printCurrentLevel(root, i);
	}

	/* Compute the "height" of a tree -- the number of
	nodes along the longest path from the root node
	down to the farthest leaf node.*/
	int height(Node root)
	{
		if (root == null)
			return 0;
		else {
			/* compute height of each subtree */
			int lheight = height(root.left);
			int rheight = height(root.right);

			/* use the larger one */
			if (lheight > rheight)
				return (lheight + 1);
			else
				return (rheight + 1);
		}
	}

	/* Print nodes at the current level */
	void printCurrentLevel(Node root, int level)
	{
		if (root == null)
			return;
		if (level == 1)
			System.out.print(root.data + " ");
		else if (level > 1) {
			printCurrentLevel(root.left, level - 1);
			printCurrentLevel(root.right, level - 1);
		}
	}

	/* Driver program to test above functions */
	public static void main(String args[])
	{
		BinaryTree tree = new BinaryTree();
		tree.root = new Node(1);
		tree.root.left = new Node(2);
		tree.root.right = new Node(3);
		tree.root.left.left = new Node(4);
		tree.root.left.right = new Node(5);

	System.out.println("Level order traversal of
								binary tree is ");
	tree.printLevelOrder();
	}
}

